from PyQt5 import QtWidgets, QtGui, QtCore
import os
import shutil
import pandas as pd
import numpy as np


class MainApp(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–°—á–µ—Ç–æ–≤–æ–¥")
        self.setFixedSize(800, 600)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞

        self.layout = QtWidgets.QVBoxLayout()
        self.setLayout(self.layout)

        self.logged_in_user = None  # –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–∏–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.update_class_list()

    def update_class_list(self):
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ layout
        for i in reversed(range(self.layout.count())):
            widget = self.layout.itemAt(i).widget()
            if widget:
                widget.deleteLater()

        # –í–µ—Ä—Ö–Ω–∏–π layout –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        top_layout = QtWidgets.QHBoxLayout()
        top_widget = QtWidgets.QWidget()
        top_widget.setLayout(top_layout)

        settings_button = QtWidgets.QPushButton("‚öôÔ∏è")
        settings_button.setFixedSize(40, 40)
        settings_button.setStyleSheet("font-size: 18px;")
        settings_button.clicked.connect(self.open_settings)
        top_layout.addWidget(settings_button, alignment=QtCore.Qt.AlignRight)

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—Ç—É–ø –æ—Ç –≤–µ—Ä—Ö–∞
        top_layout.setContentsMargins(0, 0, 0, 0)
        self.layout.addWidget(top_widget, alignment=QtCore.Qt.AlignTop)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ –∫–ª–∞—Å—Å–æ–≤
        if not os.path.exists("classes"):
            os.makedirs("classes")

        classes = [f for f in os.listdir("classes") if os.path.isdir(os.path.join("classes", f))]

        if not classes:
            # –ï—Å–ª–∏ –∫–ª–∞—Å—Å–æ–≤ –Ω–µ—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            no_classes_label = QtWidgets.QLabel("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤!")
            no_classes_label.setStyleSheet("color: red; font-weight: bold; font-size: 16px;")
            no_classes_label.setAlignment(QtCore.Qt.AlignCenter)  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            self.layout.addWidget(no_classes_label)

        else:
            for class_name in classes:
                # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout –¥–ª—è –∫–ª–∞—Å—Å–∞
                class_layout = QtWidgets.QHBoxLayout()
                class_widget = QtWidgets.QWidget()
                class_widget.setLayout(class_layout)

                # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Å–∞
                class_button = QtWidgets.QPushButton(class_name)
                class_button.setStyleSheet("font-size: 14px; padding: 10px;")
                class_button.clicked.connect(lambda _, cn=class_name: self.start_class(cn))
                class_layout.addWidget(class_button)

                # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                analytics_button = QtWidgets.QPushButton("üìä")
                analytics_button.setFixedSize(40, 40)
                analytics_button.clicked.connect(lambda _, cn=class_name: self.open_analytics(cn))
                class_layout.addWidget(analytics_button)

                # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞
                edit_button = QtWidgets.QPushButton("üìù")
                edit_button.setFixedSize(40, 40)  # –†–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                edit_button.setStyleSheet("font-size: 14px;")
                edit_button.clicked.connect(lambda _, cn=class_name: self.rename_class(cn))
                class_layout.addWidget(edit_button)

                # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞
                delete_button = QtWidgets.QPushButton("üóë")
                delete_button.setFixedSize(40, 40)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–∫–æ–π –∂–µ —Ä–∞–∑–º–µ—Ä, –∫–∞–∫ —É –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                delete_button.setStyleSheet("color: red; font-weight: bold; font-size: 14px;")
                delete_button.clicked.connect(lambda _, cn=class_name: self.delete_class(cn))
                class_layout.addWidget(delete_button)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
                self.layout.addWidget(class_widget)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        create_class_button = QtWidgets.QPushButton("–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å")
        create_class_button.setStyleSheet("font-size: 16px; padding: 10px;")
        create_class_button.clicked.connect(self.create_class)
        self.layout.addWidget(create_class_button)
    
    def save_logs(self, class_name, students_present):
        import datetime
        log_date = datetime.datetime.now().strftime("%d.%m")
        logs_path = os.path.join("classes", class_name, "logs")

        if not os.path.exists(logs_path):
            os.makedirs(logs_path)

        log_file = os.path.join(logs_path, f"{log_date}.txt")
        with open(log_file, "w", encoding="utf-8") as f:
            for student in students_present:
                f.write(f"{student}\n")

    def start_class(self, class_name):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        class_path = os.path.join("classes", class_name)
        known_faces_path = os.path.join(class_path, "known_faces.npy")
        known_names_path = os.path.join(class_path, "known_names.npy")

        if not os.path.exists(known_faces_path) or not os.path.exists(known_names_path):
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–£ –∫–ª–∞—Å—Å–∞ {class_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        known_faces = np.load(known_faces_path, allow_pickle=True)
        known_names = np.load(known_names_path, allow_pickle=True)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AbsentStudentsWindow –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–æ
        from gui_absent_students import AbsentStudentsWindow
        self.absent_students_window = AbsentStudentsWindow(
            class_name, known_faces, known_names, parent_window=self
        )
        self.absent_students_window.show()
        self.hide()  

    def create_class(self):
        try:
            from face_create_class import CreateClassWindow
            self.create_class_window = CreateClassWindow(parent_window=self)
            self.create_class_window.show()
            self.hide()  # –°–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ

            def on_close_event(event):
                self.update_class_list()
                self.show()
                event.accept()

            self.create_class_window.closeEvent = on_close_event

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞: {e}")


    def open_settings(self):
        from setting import SettingsWindow
        self.settings_window = SettingsWindow()  # –ü–µ—Ä–µ–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.settings_window.show()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.show()





    def rename_class(self, class_name):
        new_name, ok = QtWidgets.QInputDialog.getText(self, "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞:")
        if ok and new_name:
            old_path = os.path.join("classes", class_name)
            new_path = os.path.join("classes", new_name)
            if not os.path.exists(new_path):
                os.rename(old_path, new_path)
                self.update_class_list()
            else:
                QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ö–ª–∞—Å—Å —Å –∏–º–µ–Ω–µ–º {new_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    def delete_class(self, class_name):
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞
        reply = QtWidgets.QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å '{class_name}'?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
        )
        if reply == QtWidgets.QMessageBox.Yes:
            class_path = os.path.join("classes", class_name)
            if os.path.exists(class_path):
                shutil.rmtree(class_path)
            self.update_class_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤

    def open_analytics(self, class_name):
        logs_path = os.path.join("classes", class_name, "logs")
        if not os.path.exists(logs_path):
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–î–ª—è –∫–ª–∞—Å—Å–∞ {class_name} –Ω–µ—Ç –ª–æ–≥–æ–≤!")
            return

        self.analytics_window = AnalyticsWindow(class_name, logs_path)
        self.analytics_window.show()


class AnalyticsWindow(QtWidgets.QWidget):
    def __init__(self, class_name, logs_path):
        super().__init__()
        self.setWindowTitle(f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - {class_name}")
        self.setFixedSize(800, 600)
        self.logs_path = logs_path
        self.class_name = class_name
        self.initUI()

    def initUI(self):
        layout = QtWidgets.QVBoxLayout()

        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–Ω–æ–ø–∫–∏
        header_layout = QtWidgets.QHBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        self.label = QtWidgets.QLabel(f"                                                      –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ - {self.class_name}")
        self.label.setStyleSheet("font-size: 18px; font-weight: bold;")
        header_layout.addWidget(self.label)

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_button = QtWidgets.QPushButton("üñ®")
        export_button.setToolTip("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ Excel")
        export_button.setFixedSize(40, 40)
        export_button.clicked.connect(self.export_to_excel)
        header_layout.addWidget(export_button, alignment=QtCore.Qt.AlignRight)

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∫–Ω–æ–ø–∫–∞) –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        layout.addLayout(header_layout)

        # –¢–∞–±–ª–∏—Ü–∞
        self.logs_table = QtWidgets.QTableWidget()
        layout.addWidget(self.logs_table)

        self.setLayout(layout)
        self.load_logs()


    def load_logs(self):
        try:
            files = sorted([f for f in os.listdir(self.logs_path) if f.endswith(".txt")])
            attendance_data = {}
            
            for file in files:
                date = file.replace(".txt", "")
                filepath = os.path.join(self.logs_path, file)
                with open(filepath, "r", encoding="utf-8") as f:
                    lines = [line.strip().split(" - ") for line in f if line.strip()]
                    attendance_data[date] = {line[0]: line[1] for line in lines}

            all_students = set()
            for students in attendance_data.values():
                all_students.update(students.keys())

            self.logs_table.setRowCount(len(all_students))
            self.logs_table.setColumnCount(len(attendance_data) + 1)
            self.logs_table.setHorizontalHeaderLabels(["–§–∞–º–∏–ª–∏—è –ò–º—è"] + list(attendance_data.keys()))

            for row, student in enumerate(sorted(all_students)):
                self.logs_table.setItem(row, 0, QtWidgets.QTableWidgetItem(student))
                for col, date in enumerate(attendance_data.keys(), start=1):
                    status = attendance_data[date].get(student, "")
                    if status != "–ü–†":  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "–ü–†", –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                        self.logs_table.setItem(row, col, QtWidgets.QTableWidgetItem(status))
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")

    def export_to_excel(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            headers = [self.logs_table.horizontalHeaderItem(i).text() for i in range(self.logs_table.columnCount())]
            data = []
            for row in range(self.logs_table.rowCount()):
                row_data = []
                for col in range(self.logs_table.columnCount()):
                    item = self.logs_table.item(row, col)
                    row_data.append(item.text() if item else "")
                data.append(row_data)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            df = pd.DataFrame(data, columns=headers)
            downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
            output_file = os.path.join(downloads_path, f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞_{self.class_name}.xlsx")
            df.to_excel(output_file, index=False)
            
            QtWidgets.QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_file}")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
      


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    main_window = MainApp()
    main_window.show()
    sys.exit(app.exec_())
